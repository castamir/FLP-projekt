Simple Grep
===========

NAME
----
	xsurov03 - print lines matching simplified pattern


SYNOPSIS
--------
	./xsurov03 [options] PATTERN [FILE]

DESCRIPTION
-----------
	xsurov03 is a simple grep searches the named input FILE (or standard input
	if no file is given) for lines containing a match to the given PATTERN.
	By default, Simple grep prints the matching lines.

OPTIONS
-------
	-p
		Ignore given input. Prints a minimal finite automata (MFA) coresponding
		to the PATERN as a table of rules with MFA definition.

	-v
		Invert the sense of matching, to select non-matching lines.


PARSER
------
	Module Parser creates abstract syntactic tree (AST) based on a given regular 
	expression. AST is designed as a binary tree with one operation in root node
	and serves as an input for creating the minimal finite automata equivalent
	to given regular expression.

FINITE AUTOMATA
---------------
	The finite automata or rather the nondeterministic finite automata (NFA) is 
	constructed	from the AST which is output of Parser Module. Module NFA
	contains all necessary methods for constructing NFA.

	NFA module also contains methods for iteration of NFA, concatenation and
	union of two NFA.

	NFA is also an input of DFA module. DFA module contains methods for 
	determinisation. Output of DFA module is deterministic finite automata (DFA).

	DFA module contains methods for finding epsilon closure sets, making new 
	transition function and new set of states.

MINIMAL FINITE AUTOMATA
-----------------------
	Minimal deterministic finite automata (MDFA) is created by module MIN.
	Input of MIN is DFA from module DFA. Output of module MIN is minimal DFA.

	Minimization is based on creating factor classes which represent new states 
	of MDFA. New set of rules for MDFA transition function is based on rules 
	contained in DFA transition function and new states of MDFA. 

MINIMAL FINITE AUTOMATA OUTPUT FORMAT
-------------------------------------
	Table representing transition function:

	Source  | Dest | Symbols
	------------------------
		    |      |

	Where Source is start state of rule, Dest is end state of rule, Symbols 
	represent symbol in rule like this:

		(Source, Symbol) -> Dest

	If more symbols provides transition from Source state to Dest state, it 
	can be wrote like this:

		{a,b,c,e} or {a-c,e}

	There is also a special nonterminating state called "trap". Once automata
	reach this state you will read all input symbols and deny whole input. 

EXTENSIONS
----------
	?	The preceding item is optional and matched at most once.
	+	The preceding item will be matched one or more times.

AUTHORS
-------
	xsurov03 - Marek Surovic
	xstodu05 - Petr Stodulka
	xpavlu06 - Igor Pavlu
	xpauli00 - Miroslav Paulik
