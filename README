Simple Grep
===========

NAME
----
    xsurov03 - print lines matching simplified regular expression


SYNOPSIS
--------
    ./xsurov03 [options] PATTERN [FILE]

DESCRIPTION
-----------
    xsurov03 is a simple grep that searches the named input FILE (or standard 
    input if no file is given) for lines containing a match to the given PATTERN.
    By default, Simple grep prints the matching lines.

OPTIONS
-------
    -p
        Ignores given input. Prints a minimal finite automaton (MFA) corresponding
        to PATTERN. The MFA is specified by its sets and a table of transition rules.

    -v
        Prints lines that DO NOT match the the given PATTERN. 


PARSER
------
    The Parser module creates an abstract syntactic tree (AST) based on a given regular 
    expression. The AST is designed as a binary expression tree with one operation
    in the root node and serves as an input for creating the minimal finite automaton
    equivalent to the given regular expression.

NON-DETERMINISTIC FINITE AUTOMATA
---------------------------------
    The non-deterministic finite automaton (NFA) is constructed from the AST which is
    the output of the Parser module. The NFA module contains all necessary functions
    for constructing an NFA.

DETERMINISTIC FINITE AUTOMATA
-----------------------------
    The DFA module contains functions for NFA determinisation. The input of the DFA module
    is provided by the NFA module. The output of the DFA module is a deterministic finite 
    automaton (DFA). Determinisation is based on an algorithm that constructs an epsilon
    closure of the input NFA.

MINIMAL FINITE AUTOMATA
-----------------------
    The MIN module provides functions for minimization of DFA. The input of the MIN module
    is a DFA from module DFA. The output of module MIN is a minimal DFA.

    Minimization is based on an algorithm that creates factor classes of nondistinguishable states.
    These factor classes represent the new states of the MDFA. New sets of rules and final states
    and a starting state are made based on the new states of the MDFA.

MINIMAL FINITE AUTOMATA OUTPUT FORMAT
-------------------------------------
    Table representing transition function:

    Source  | Dest | Symbols
    ------------------------
            |      |

    Source is start state of a rule, Dest is the end state of a rule. Symbols 
    represents a set of symbols by which the transition from Source to Dest is
    done. The following would be a delta function notation of the transition. 

        delta (Source, Symbol) -> Dest

    The set of symbols is specified as shown below.

        {a,b,c,,d,e} or {a-d,e}

    A special non-terminating "trap" state is specified as well. This state
    serves as a sign that the pattern specified by the MDFA will not be matched,
    and thus the matching for a given can be terminated.

Interpret
---------
    The Interpret module implements a basic MDFA interpreter that matches a line
    from a given input against a given MDFA. A successful match is determined by
    a series of transitions of the given MDFA that ends in a final state. Upon a
    successful match the line on which the match was found is printed. In the
    case of a unsuccessful match, the first character of the input string (a 
    line in the first step) is ommitted and the matching is done again. If no
    match is found on a line, the line is defaultly not printed.


EXTENSIONS
----------
    ?   The preceding item is optional and matched at most once.
    +   The preceding item will be matched one or more times.

AUTHORS
-------
    xsurov03 - Marek Surovic
    xstodu05 - Petr Stodulka
    xpavlu06 - Igor Pavlu
    xpauli00 - Miroslav Paulik
